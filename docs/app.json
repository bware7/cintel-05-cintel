[{"name": "app.py", "content": "# --------------------------------------------\n# Imports\n# --------------------------------------------\nfrom shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\n\n# --------------------------------------------\n# Constants\n# --------------------------------------------\nUPDATE_INTERVAL_SECS: int = 3\nDEQUE_SIZE: int = 10\n\n# --------------------------------------------\n# Reactive Data Wrapper\n# --------------------------------------------\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# --------------------------------------------\n# Reactive Calculation for Live Data\n# --------------------------------------------\n@reactive.calc()\ndef reactive_calc_combined():\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n    \n    # Generate new random temperature data\n    temp = round(random.uniform(-20, -10), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_entry = {\"temp\": temp, \"timestamp\": timestamp}\n    \n    # Add to reactive deque\n    reactive_value_wrapper.get().append(new_entry)\n    deque_snapshot = reactive_value_wrapper.get()\n    \n    # Create a DataFrame for visualization\n    df = pd.DataFrame(deque_snapshot)\n    return deque_snapshot, df, new_entry\n\n# --------------------------------------------\n# Shiny UI\n# --------------------------------------------\nui.page_opts(title=\"Bin's Continuous Intelligence App\", fillable=True)\n\n# Sidebar content\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Live Weather Dashboard\", class_=\"text-center\")\n    ui.p(\"This app demonstrates real-time temperature monitoring.\", class_=\"text-center\")\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\"GitHub Repository\", href=\"https://github.com/bware7/cintel-05-cintel\", target=\"_blank\")\n    ui.a(\"Shiny Documentation\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n\n# Main Layout\nwith ui.layout_columns():\n    # Temperature Value Box\n    with ui.value_box(\n        showcase=icon_svg(\"thermometer\"),  # Updated valid icon\n        theme=\"bg-gradient-blue\",\n    ):\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            _, _, latest_entry = reactive_calc_combined()\n            return f\"{latest_entry['temp']} \u00b0C\"\n\n        \"Updated Continuously\"\n\n    # Timestamp Card\n    with ui.card(full_screen=True):\n        ui.card_header(\"Current Timestamp\")\n\n        @render.text\n        def display_time():\n            _, _, latest_entry = reactive_calc_combined()\n            return f\"{latest_entry['timestamp']}\"\n\n# Data and Chart Layout\nwith ui.card(full_screen=True):\n    ui.card_header(\"Recent Data Readings\")\n\n    @render.data_frame\n    def display_data():\n        _, df, _ = reactive_calc_combined()\n        return df\n\nwith ui.card():\n    ui.card_header(\"Temperature Trend Chart\")\n\n    @render_plotly\n    def display_chart():\n        _, df, _ = reactive_calc_combined()\n\n        if not df.empty and len(df) > 1:\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n            # Create scatter plot for readings\n            fig = px.scatter(\n                df, \n                x=\"timestamp\", \n                y=\"temp\", \n                title=\"Temperature Readings with Trend Line\",\n                labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"}\n            )\n\n            # Linear Regression - Ensure sufficient data\n            x_vals = range(len(df))\n            y_vals = df[\"temp\"]\n\n            if len(set(y_vals)) > 1:  # Ensure variation in data\n                slope, intercept, *_ = stats.linregress(x_vals, y_vals)\n                df[\"trend_line\"] = [slope * x + intercept for x in x_vals]\n                # Add trend line to plot\n                fig.add_scatter(x=df[\"timestamp\"], y=df[\"trend_line\"], mode=\"lines\", name=\"Trend Line\")\n            else:\n                # Add a note if no variation in data\n                fig.add_annotation(\n                    text=\"No trend line: Insufficient variation in data\",\n                    xref=\"paper\", \n                    yref=\"paper\", \n                    showarrow=False,\n                    x=0.5, \n                    y=0.9\n                )\n\n            fig.update_layout(\n                xaxis_title=\"Time\",\n                yaxis_title=\"Temperature (\u00b0C)\",\n                template=\"plotly_dark\"\n            )\n            return fig\n        else:\n            # Return an empty figure with a note if there's no data\n            return px.scatter(title=\"Not enough data to calculate trends\")\n", "type": "text"}]